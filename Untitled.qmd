---
execute:
  echo: false
  warning: false
---

```{python}
import drawsvg as dw
import urllib
from urllib.request import urlopen
import json
from IPython.display import SVG, Image
```

```{python}
"""
https request to the api, stocked as Python Dict in dat
"""
url = "https://api.open-meteo.com/v1/meteofrance?latitude=43.6109&longitude=3.8763&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,wind_speed_10m_max&timezone=Europe%2FLondon"

with urlopen(url) as response:
    data = response.read()
dat = json.loads(data.decode())
```

```{python}
"""
exctracting the data to display
"""
table = [0, 1, 2, 3]
for i in table:
    table[i] = [
        dat["daily"]["time"][i],
        dat["daily"]["temperature_2m_max"][i],
        dat["daily"]["temperature_2m_min"][i],
        dat["daily"]["wind_speed_10m_max"][i],
        dat["daily"]["precipitation_sum"][i],
    ]
```

```{python}
"""
creating the colomun headers and adding the background template to display
"""
l = ["Date", "Tmax", "Tmin", "Vent", "Pluie"]
d = dw.Drawing(1001, 1001)
d.append(dw.Image(0, 0, 1000, 1000, "svg.svg", embed=True))
# Cursed formating done by hand because I didn't account for Tmax/tmin being in the same colomun when creating the svg.svg backgroud...
d.append(dw.Text(l[0], 20, 50, 150))
d.append(dw.Text(l[1], 20, 250, 150))
d.append(dw.Text(l[2], 20, 350, 150))
d.append(dw.Text(l[3], 20, 600, 150))
d.append(dw.Text(l[4], 20, 850, 150))
```

```{python}
"""
rendering the table as svg content to put in front of the template
"""
for i in [0, 1, 2, 3]:
    text = dw.Text(str(table[i][0]), 20, 50, 200 + 100 * i)
    d.append(text)
    text = dw.Text(str(table[i][1]) + " C°", 20, 250, 200 + 100 * i)
    d.append(text)
    text = dw.Text(str(table[i][2]) + " C°", 20, 350, 200 + 100 * i)
    d.append(text)
    text = dw.Text(str(table[i][3]) + " KM/H", 20, 600, 200 + 100 * i)
    d.append(text)
    text = dw.Text(str(table[i][4]) + " MM", 20, 850, 200 + 100 * i)
    d.append(text)
d.save_svg("layer1.svg")
```

```{python}
d
```

